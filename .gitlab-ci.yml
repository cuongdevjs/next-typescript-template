image: node:14.11.0



before_script:
  - apt-get update -qq && apt-get install


cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules
    - .next
    - .yarn

stages:
  - setup
  - build
  # - deploy
  - docker-build

setup:
  stage: setup
  script:
    - echo "setup started"
    - yarn install
    - echo "setup completed"
  artifacts:
    when: on_success
    expire_in: never
    paths:
      - node_modules
  only:
    - merge_requests
    - development
    - master
  #   changes:
  #     - package.json
  #     - package-lock.json
  allow_failure: false

build:
  stage: build
  image: node
  script:
    - echo "build started"
    - yarn build
    - echo "build completed"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
  only:
    - merge_requests
    - development
    - master
  dependencies:
    - setup

# deploy:
#   stage: deploy
#   image: ubuntu:18.04
#   before_script:
#     - echo "deploy started"
#   script:
#     - apt-get update -qq && apt-get install -y -qq lftp
#     # - lftp -c "set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; mirror -Rnev build/ ./ --ignore-time --delete-first --parallel=20 --exclude-glob .git* --exclude .git/"
#     - lftp -c "set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST;  mirror -Rev build/ ./ --ignore-time --parallel=20 --delete-first --exclude-glob .git* --exclude .git/"
#     - echo "deploy completed"
#   dependencies:
#     - setup
#     - build
#   only:
#     - development
#     # - master

docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - name: docker:19.03.8-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker info
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    # - docker-compose up -d --build --remove-orphans
    # - docker-compose build --pull
    - docker push "$CI_REGISTRY_IMAGE"
    - echo "Registry image:" $CI_REGISTRY_IMAGE
  needs: []
  allow_failure: false
  only:
    - development
    - master
